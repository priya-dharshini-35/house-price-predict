# -*- coding: utf-8 -*-
"""nm-project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZV5YgsTXNi3RRBQe_tqKJV5sUjA44nW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the dataset
dataset = pd.read_csv('Chennai houseing sale.csv')

# Display the first 5 rows
print(dataset.head())

# Check for missing values
print(dataset.isnull().sum())

# Fill missing values or drop them
#dataset.fillna(dataset.mean(), inplace=True)

# Convert categorical variables using one-hot encoding
dataset = pd.get_dummies(dataset, drop_first=True)

# Define features and target variable
X = dataset.drop('SALES_PRICE', axis=1)  # Features
y = dataset['SALES_PRICE']  # Target variable

from sklearn.model_selection import train_test_split

   # Assuming X and y are defined as in your previous code
   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
   print(y_train.shape)

print(X_train.isnull().sum())
   print(y_train.isnull().sum())

from sklearn.impute import SimpleImputer

   # Create an imputer object with a strategy (mean, median, most_frequent, etc.)
   imputer = SimpleImputer(strategy='mean')  # You can also use 'median' or 'most_frequent'

   # Fit the imputer on the training data and transform it
   X_train = imputer.fit_transform(X_train)

   # If you also need to transform the test set, do it like this:
   X_test = imputer.transform(X_test)

model = LinearRegression()
   model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Mean Absolute Error: {mae}')
print(f'Root Mean Squared Error: {rmse}')